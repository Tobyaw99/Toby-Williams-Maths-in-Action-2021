#Contains the code for the simulations used in the exiting lockdown section

import matplotlib.pyplot as plt
import numpy as np
import Models as m

z0 = [2.35446336e+05, 1.06129535e+02, 2.44740713e+00, 1.50515538e+02,
       5.23539520e+01, 8.95966732e-01, 5.50740326e+01, 7.08978203e-02,
       3.41912381e+00, 3.98186172e+03, 8.95383799e-01, 2.65857994e+05,
       8.96902524e+01, 6.98121757e+00, 1.22300589e+02, 4.42592070e+01,
       2.55568222e+00, 4.47638127e+01, 3.16149244e-01, 9.69457591e+00,
       3.61784855e+03, 3.59634526e+00, 2.63658904e+05, 7.87713285e+01,
       1.40770415e+01, 9.94474871e+01, 3.89099330e+01, 5.16153734e+00,
       3.64605565e+01, 1.51222229e+00, 1.91070109e+01, 3.13139765e+03,
       1.62510649e+01, 1.76236705e+05, 2.06835842e+01, 6.20126140e+00,
       2.36124953e+01, 1.05889808e+01, 2.40913854e+00, 9.17152956e+00,
       1.31005870e+00, 8.28240539e+00, 8.65627166e+02, 1.54086118e+01,
       4.56897227e+04, 3.83176015e+00, 1.75760464e+00, 3.76945397e+00,
       2.09722596e+00, 7.59060223e-01, 1.62694792e+00, 4.97996712e-01,
       2.39552649e+00, 1.85955152e+02, 7.58658111e+00]

#######################################################
#Case 1: early lift

early1= m.VaccineModel('Early lift part 1')
early1.set_t(100)
early1.set_tier(5)
early1.set_C()
early1.set_vaccine_order([4,3,2,1,0])
early1.set_conditions([2.12966682e+05, 2.03823023e+03, 3.84308146e+01, 2.36349510e+03,
       1.39155760e+03, 1.95766435e+01, 1.20393565e+03, 1.07028331e+00,
       4.71049091e+01, 1.97265591e+04, 3.35813421e+00, 2.50386636e+05,
       1.50165350e+03, 9.48419566e+01, 1.66149057e+03, 1.02831508e+03,
       4.85386359e+01, 8.50317038e+02, 4.11828244e+00, 1.14804332e+02,
       1.40970529e+04, 1.22316407e+01, 2.50397053e+05, 1.29670145e+03,
       1.87776265e+02, 1.32654845e+03, 8.88425286e+02, 9.61865362e+01,
       6.79508129e+02, 1.93250405e+01, 2.20267325e+02, 1.19317932e+04,
       5.64157639e+01, 1.73422355e+05, 2.93802942e+02, 7.08500426e+01,
       2.69775162e+02, 2.02375750e+02, 3.66293942e+01, 1.39471734e+02,
       1.40694311e+01, 7.87974871e+01, 2.62982454e+03, 4.20488784e+01,
       4.52539382e+04, 4.78685601e+01, 1.75819237e+01, 3.77071445e+01,
       3.32768962e+01, 9.23448340e+00, 1.98037989e+01, 4.53588658e+00,
       1.90215479e+01, 4.41526514e+02, 1.55050078e+01])

early1.vax_simulation(100)

early1.set_conditions([2.25497011e+05, 9.91967377e+02, 1.89066860e+01, 1.16276119e+03,
       9.80307864e+02, 1.39405357e+01, 8.57315024e+02, 6.01332883e-01,
       2.63985279e+01, 1.02489554e+04, 1.83475575e+00, 2.60275890e+05,
       6.10071615e+02, 3.91006644e+01, 6.84985714e+02, 6.03312791e+02,
       2.88474996e+01, 5.05357502e+02, 1.94099911e+00, 5.40670102e+01,
       6.99016812e+03, 6.25852459e+00, 2.58885625e+05, 5.25813526e+02,
       7.73377402e+01, 5.46353713e+02, 5.20099706e+02, 5.70797492e+01,
       4.03237601e+02, 9.10243407e+00, 1.03692046e+02, 5.94306520e+03,
       2.85931024e+01, 1.75203392e+05, 1.19978373e+02, 2.95415423e+01,
       1.12485103e+02, 1.19024289e+02, 2.19214458e+01, 8.34683918e+01,
       6.72691808e+00, 3.77673012e+01, 1.44185799e+03, 2.38367840e+01,
       4.55364748e+04, 1.88870530e+01, 7.11635000e+00, 1.52621091e+01,
       1.88519670e+01, 5.34311213e+00, 1.14581536e+01, 2.11281485e+00,
       8.92503222e+00, 2.65574580e+02, 9.99397875e+00])

early2= m.VaccineModel('Early lift part 2')
early2.set_t(1400)
early2.set_vaccine_order([4,3,2,1,0])
early2.set_tier(0)
early2.set_C()
early2.set_conditions(early1.raw_results[-1])
early2.vax_simulation(1400)

###############################################################
#Case 2: late lift

late1= m.VaccineModel('Late lift part 1')
late1.set_t(400)
late1.set_tier(5)
late1.set_C()
late1.set_vaccine_order([4,3,2,1,0])
late1.set_conditions([2.35446336e+05, 1.06129535e+02, 2.44740713e+00, 1.50515538e+02,
       5.23539520e+01, 8.95966732e-01, 5.50740326e+01, 7.08978203e-02,
       3.41912381e+00, 3.98186172e+03, 8.95383799e-01, 2.65857994e+05,
       8.96902524e+01, 6.98121757e+00, 1.22300589e+02, 4.42592070e+01,
       2.55568222e+00, 4.47638127e+01, 3.16149244e-01, 9.69457591e+00,
       3.61784855e+03, 3.59634526e+00, 2.63658904e+05, 7.87713285e+01,
       1.40770415e+01, 9.94474871e+01, 3.89099330e+01, 5.16153734e+00,
       3.64605565e+01, 1.51222229e+00, 1.91070109e+01, 3.13139765e+03,
       1.62510649e+01, 1.76236705e+05, 2.06835842e+01, 6.20126140e+00,
       2.36124953e+01, 1.05889808e+01, 2.40913854e+00, 9.17152956e+00,
       1.31005870e+00, 8.28240539e+00, 8.65627166e+02, 1.54086118e+01,
       4.56897227e+04, 3.83176015e+00, 1.75760464e+00, 3.76945397e+00,
       2.09722596e+00, 7.59060223e-01, 1.62694792e+00, 4.97996712e-01,
       2.39552649e+00, 1.85955152e+02, 7.58658111e+00])

late1.set_conditions([2.12966682e+05, 2.03823023e+03, 3.84308146e+01, 2.36349510e+03,
       1.39155760e+03, 1.95766435e+01, 1.20393565e+03, 1.07028331e+00,
       4.71049091e+01, 1.97265591e+04, 3.35813421e+00, 2.50386636e+05,
       1.50165350e+03, 9.48419566e+01, 1.66149057e+03, 1.02831508e+03,
       4.85386359e+01, 8.50317038e+02, 4.11828244e+00, 1.14804332e+02,
       1.40970529e+04, 1.22316407e+01, 2.50397053e+05, 1.29670145e+03,
       1.87776265e+02, 1.32654845e+03, 8.88425286e+02, 9.61865362e+01,
       6.79508129e+02, 1.93250405e+01, 2.20267325e+02, 1.19317932e+04,
       5.64157639e+01, 1.73422355e+05, 2.93802942e+02, 7.08500426e+01,
       2.69775162e+02, 2.02375750e+02, 3.66293942e+01, 1.39471734e+02,
       1.40694311e+01, 7.87974871e+01, 2.62982454e+03, 4.20488784e+01,
       4.52539382e+04, 4.78685601e+01, 1.75819237e+01, 3.77071445e+01,
       3.32768962e+01, 9.23448340e+00, 1.98037989e+01, 4.53588658e+00,
       1.90215479e+01, 4.41526514e+02, 1.55050078e+01])
late1.vax_simulation(400)

late1.set_conditions([2.25497011e+05, 9.91967377e+02, 1.89066860e+01, 1.16276119e+03,
       9.80307864e+02, 1.39405357e+01, 8.57315024e+02, 6.01332883e-01,
       2.63985279e+01, 1.02489554e+04, 1.83475575e+00, 2.60275890e+05,
       6.10071615e+02, 3.91006644e+01, 6.84985714e+02, 6.03312791e+02,
       2.88474996e+01, 5.05357502e+02, 1.94099911e+00, 5.40670102e+01,
       6.99016812e+03, 6.25852459e+00, 2.58885625e+05, 5.25813526e+02,
       7.73377402e+01, 5.46353713e+02, 5.20099706e+02, 5.70797492e+01,
       4.03237601e+02, 9.10243407e+00, 1.03692046e+02, 5.94306520e+03,
       2.85931024e+01, 1.75203392e+05, 1.19978373e+02, 2.95415423e+01,
       1.12485103e+02, 1.19024289e+02, 2.19214458e+01, 8.34683918e+01,
       6.72691808e+00, 3.77673012e+01, 1.44185799e+03, 2.38367840e+01,
       4.55364748e+04, 1.88870530e+01, 7.11635000e+00, 1.52621091e+01,
       1.88519670e+01, 5.34311213e+00, 1.14581536e+01, 2.11281485e+00,
       8.92503222e+00, 2.65574580e+02, 9.99397875e+00])

late2= m.VaccineModel('Late lift part 2')
late2.set_t(1100)
late2.set_vaccine_order([4,3,2,1,0])
late2.set_tier(0)
late2.set_C()
late2.set_conditions(late1.raw_results[-1])
late2.vax_simulation(1100)

##################################################################
#Easing Restrictions

#Do the first 200ish days as before then can just use a tier model after that
ease1= m.VaccineModel('Easing lift part 1')
ease1.set_t(300)
ease1.set_tier(5)
ease1.set_C()
ease1.set_vaccine_order([4,3,2,1,0])
ease1.set_conditions([2.35446336e+05, 1.06129535e+02, 2.44740713e+00, 1.50515538e+02,
       5.23539520e+01, 8.95966732e-01, 5.50740326e+01, 7.08978203e-02,
       3.41912381e+00, 3.98186172e+03, 8.95383799e-01, 2.65857994e+05,
       8.96902524e+01, 6.98121757e+00, 1.22300589e+02, 4.42592070e+01,
       2.55568222e+00, 4.47638127e+01, 3.16149244e-01, 9.69457591e+00,
       3.61784855e+03, 3.59634526e+00, 2.63658904e+05, 7.87713285e+01,
       1.40770415e+01, 9.94474871e+01, 3.89099330e+01, 5.16153734e+00,
       3.64605565e+01, 1.51222229e+00, 1.91070109e+01, 3.13139765e+03,
       1.62510649e+01, 1.76236705e+05, 2.06835842e+01, 6.20126140e+00,
       2.36124953e+01, 1.05889808e+01, 2.40913854e+00, 9.17152956e+00,
       1.31005870e+00, 8.28240539e+00, 8.65627166e+02, 1.54086118e+01,
       4.56897227e+04, 3.83176015e+00, 1.75760464e+00, 3.76945397e+00,
       2.09722596e+00, 7.59060223e-01, 1.62694792e+00, 4.97996712e-01,
       2.39552649e+00, 1.85955152e+02, 7.58658111e+00])
ease1.set_conditions([2.12966682e+05, 2.03823023e+03, 3.84308146e+01, 2.36349510e+03,
       1.39155760e+03, 1.95766435e+01, 1.20393565e+03, 1.07028331e+00,
       4.71049091e+01, 1.97265591e+04, 3.35813421e+00, 2.50386636e+05,
       1.50165350e+03, 9.48419566e+01, 1.66149057e+03, 1.02831508e+03,
       4.85386359e+01, 8.50317038e+02, 4.11828244e+00, 1.14804332e+02,
       1.40970529e+04, 1.22316407e+01, 2.50397053e+05, 1.29670145e+03,
       1.87776265e+02, 1.32654845e+03, 8.88425286e+02, 9.61865362e+01,
       6.79508129e+02, 1.93250405e+01, 2.20267325e+02, 1.19317932e+04,
       5.64157639e+01, 1.73422355e+05, 2.93802942e+02, 7.08500426e+01,
       2.69775162e+02, 2.02375750e+02, 3.66293942e+01, 1.39471734e+02,
       1.40694311e+01, 7.87974871e+01, 2.62982454e+03, 4.20488784e+01,
       4.52539382e+04, 4.78685601e+01, 1.75819237e+01, 3.77071445e+01,
       3.32768962e+01, 9.23448340e+00, 1.98037989e+01, 4.53588658e+00,
       1.90215479e+01, 4.41526514e+02, 1.55050078e+01])
ease1.vax_simulation(200)

ease2 = m.TierModel('Easing lift part 2')
ease2.set_t(100)
ease2.set_conditions(ease1.raw_results[-1])
ease2.set_tier(4)
ease2.set_C()
ease2.run_simulation()

ease2.set_tier(3)
ease2.set_t(100)
ease2.set_C()
ease2.continue_simulation(100,3)

ease2.set_tier(2)
ease2.set_t(100)
ease2.set_C()
ease2.continue_simulation(100,2)

ease2.set_tier(1)
ease2.set_t(700)
ease2.set_C()
ease2.continue_simulation(1000,1)


###################################################################
#Plotting
plt.figure(1)
#plot early
plt.plot(range(300,401),early1.results[:,5,2],'r')
plt.plot(range(400,1801),early2.results[:,5,2],'r',label = 'Early Lockdown Liift')
#plot late
plt.plot(range(300,701),late1.results[:,5,2],'g')
plt.plot(range(700,1801),late2.results[:,5,2],'g',label = 'Late Lockdown Liift')

#plot easing
plt.plot(range(300,501),ease1.results[:,5,2],'b')
plt.plot(range(500,1801),ease2.results[:,5,2],'b',label = 'Easing Lockdown Liift')

plt.ylabel('Infections')
plt.xlabel('Time (days)')
plt.legend(loc='best')
plt.show()

#####################################################################
#Metrics
print('Early')
print("Final Size =" , early2.get_final_size()+early1.get_final_size())
print("Final Death Count =" , early2.results[-1,5,6])
print("Peak Infections =" , early2.get_peak_infections())
print("Peak Hospitalisations =" , early2.get_peak_hospitalisations())
print("Duration =" , early2.get_duration()+400)

print('\nLate')
print("Final Size =" , late2.get_final_size()+late1.get_final_size())
print("Final Death Count =" , late2.results[-1,5,6])
print("Peak Infections =" , late2.get_peak_infections())
print("Peak Hospitalisations =" , late2.get_peak_hospitalisations())
print("Duration =" , late2.get_duration()+700)

print('\nEase')
print("Final Size =" , ease2.get_final_size()+ease1.get_final_size())
print("Final Death Count =" , ease2.results[-1,5,6])
print("Peak Infections =" , ease2.get_peak_infections())
print("Peak Hospitalisations =" , ease2.get_peak_hospitalisations())
print("Duration =" , ease2.get_duration()+500)
